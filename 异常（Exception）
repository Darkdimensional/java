异常：是在运行时期发现的不正常情况。。
 
 在java中对类的形式对不正常的情况的进去描述和封装对象。
 
 描述不正常的情况的类，就称为异常类。增加阅读性。

不同的问题用不同的类进行描述。

问题很多，意味着描述的类也很多，
将其共性进行向上抽取，形成异常体系。

最终问题分为两大类：
Throwable：抛出
1：一般不可处理。Error
	特点：由jvm抛出的严重性的问题。一般不处理，直接修改程序。
2：可以处理。Exception

特点：该体系的特点在于Throwable及其所有的子类都具有可抛性。
通过throws，throw两个关键字所操纵的类和对象具有可抛性。

异常的分类：
1.编译时被检测的异常：只要是Exception和其子类都是。除了特殊子类RuntimeException。这种问题一旦出现，希望在编译时进行 检测，让这种问题有对应的处理方式。

2.编译时不检测异常（运行时异常）：就是Exception中的RuntimeException。这种问题发生，无法让功能继续，运算无法进行，更多因为调用者的原因导致的或内部状态的改变导致的。一般不处理，直接编译通过，在运行时，让调用者调用时强制停止程序，让其修改代码。

throws与throw区别
1：throws使用在函数上。
throw使用在函数内
2：throws抛出的是异常类，可以抛出多个，用逗号隔开。
throw抛出的是异常对象。

异常的抛出形式：
在需要抛出的函数后声明
具体格式：
函数名 throws 异常类
异常处理的捕捉形式：
这是可以对异常进行针对性处理的方式。
具体格式：
try{
需要被检测异常的代码。
}catch（异常类 变量）{//该变量用于接收发生的异常对象
处理异常的代码。
}finally{
一定会被执行的代码。
}

异常处理的原则：
1.函数内部如果抛出需要检测的异常，那么函数上必须要声明。否则必须在函数内用try catch捕捉，否则编译失败。
2.如果调用到了声明异常的函数，要么try catch要么throws,否则编译失败
3.什么时候catch，什么时候throws呢？
功能内容可以解决，用catch。解决不了用throws告诉调用者，由调用者解决。
4.一个功能如果抛出多个异常，那么调用时，必须有多个catch对应进行针对处理。几个异常对应几个catch。

finally
除非在catch中退出jvm（System.exit(0)）否则注定执行（函数结束也执行 return）
通常用于关闭（释放）资源。如数据库关闭。

try catch finally 代码块组合特点：
1.try只能一个，catch可以多个或不要（无时必须要声明），finally也可以不要。
