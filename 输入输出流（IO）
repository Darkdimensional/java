输入流与输入流相对于内存设备而言。

将外设中的数据读取到内存中：输入。
将内存的数据写入到外设中：输出。

字符流的由来：
字节流读取文字字节数据后，不直接操作而是先查指定的编码表。获取对应的文字。
在对这个文字进行操作。简单说：字节流+编码表。

------------------------------------------------

字节流的两个顶层父类：
	1、InputStream
	2、OutputStream

字符流的两个顶层父类：
	1、Reader
	2、Writer
	
这些子类体系几乎都已父类名作为后缀。而却子类名的前缀就是该对象的功能。
	
如果要操作的文字数据，优先考虑字符流。	
	
IO对象建立在try外，在内进行初始化。
关闭单独try，并且需要判断对象是否为空	
	FileWriter fw = null;
		try {
			fw = new FileWriter("k:\\demo.txt", true);
		}finally {
			if (fw != null)
			try {
				fw.close();
			} catch (IOException e) {
				throw new RuntimeException("关闭失败");
			}

------------------------------------------------

缓冲区：
	提高了对数据的读写效率。
	1、BufferedWriter
	2、BufferedReat

关闭缓冲区。其实关闭的是缓冲的流对象。

BufferedWriter提供换行方法:newLine();
BufferedReat提供读行方法:readLine();

----------------------------------------------

装饰设计模式：
	对一组对象的功能进行增强时，就可以使用该模式进行问题的解决。
	
装饰和继承都能实现功能的扩展和增强。
区别：
	
首先有个继承体系（假）
Writer
	|--TextWriter:用于操作文本。
	|--MediaWriter:用于操作媒体。
	
想要对操作的动作进行效率的提高。	
Writer
	|--TextWriter:用于操作文本。
		|--BufferTextWriter：加入缓冲技术。
	|--MediaWriter:用于操作媒体。
		|-BufFerMediaWriter：
发现只为提高功能进行继承，导致继承体系越来越臃肿。不够灵活。所以产生了修饰。	
	
加入的都死缓冲，所以将缓冲进行封装，哪个对象需要缓冲就关联起来。	
Writer
	|--TextWriter:用于操作文本。
	|--MediaWriter:用于操作媒体。
	|--BufferWriter:用于提高效率。
	
装饰比继承灵活。

特点：装饰类和被装饰类都必须所属同一个接口或者父类。

---------------------------------------------

转换流：
InputStreamReader：将字节流转换字符流的桥梁。解码。
OutputStreamWriter：将字符流转换字节流的桥梁。编码。

流的操作规律：
因为流太多，开发不知道用哪个对象合适。

只要通过四个明确即可。
1、明确源和目的（汇）
	源：inputStream		Raeder
	汇：OutputStream		Writer
2、 明确数据是否是纯文本数据。
	源：是 ：Reader
		否：InputStream
	汇：是：Writer
		否：OutputStream
3、明确具体设备。
	源设备：
		硬盘：File
		键盘：System.in
		内存：数组
		网络：Socket流
	汇设备：
		硬盘：File
		控制台：System.out
		内存：数组
		网络：Socket流
4、是否需要其他额外功能。
	1、是否需要高效（缓冲区）。
		是，加上Buffer。
	2、转换。
	...
	
如果明确编码表，就不能是FileWriter/FileReader,
应该使用期父类OutputStreamWriter/InputStreamReader来确定编码表.

OutputStreamWriter osw = new OutputStreamWriter(new FileOutputStream("文件名"), charsetName);
高效
BufferedWriter bufw = new BuffereWriter(new OutputStreamWriter(new FileOutputStream("文件名"), charsetName));

什么时候使用转换流呢？
1、源或者目的对应的设备是字节流，但是操作却是文本数据，可以使用转换作为桥梁。
2、一旦操作文本涉及到具体的指定编码表示，必须使用转换流。
--------------------------------------------

 map
|--hashtable
|--properties

properties集合：
特点：
1、该集合中的键和值都是字符串类型。
2、该集合中的数据可以保存到流中，或者从流获取。

通常该集合用于操作以键值形式存在的配置文件。
list输出

--------------------------------------------

PrintStream:
1、提供了打印方法可以对多种数据类型值直接打印。并保持		数据的表示形式。
 2、它不抛IOException

构造函数，接收三种类型的值：
1、字符串路径。
 2、File对象。
 3、字节输出流。

PrintWriter:字符打印流。
构造函数参数：
1、字符串路径
 2、File对象
3、字节输出流
4、字符输出流

------------------------------------------------------------------

序列流：SequenceInputStream
操作对象：ObjectInputStream和ObjectOutputStream需要对象序列化，被序列化的对象必须实现Serializable接口。
管道流：PipedInputStream。
基本数据流：DataInputStream
数组流：ByteArrayInputStream


------------------------------------------------------------

randomAccessFile不是io体系中的子类
 特点：
  1、该对象既能读，又能写。
  2、该对象内部维护了一个byte数组，并通过指针可以操作数组中的元素。
  3、可以通过getFilePointer方法获取指针位置，和通过seek方法设置指针的位置。
  4、其实该对象只是将字节输入流和输出流进行封装。
  5、该对象的源或者目的只能是文件，通过构造函数就能看出。






